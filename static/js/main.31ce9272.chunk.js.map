{"version":3,"sources":["Reducers/Reducer.js","Constants/Constant.js","rootReducer.js","Actions/Action.js","Components/Home.js","Tab.js","Root.js","App.js","store.js","registerServiceWorker.js","index.js"],"names":["initialState","tabStatus","rootReducer","combineReducers","Reducer","state","action","type","Object","assign","menuChange","Home","props","React","Component","connect","mapStateToProps","mapDispatchToProps","Tab","nextProps","nextState","propsDiff","_","isEqual","this","stateDiff","Root","window","innerWidth","dispatch","bindActionCreators","Action","store","compose","applyMiddleware","Thunk","createStore","finalCreateStore","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.31ce9272.chunk.js","sourcesContent":["import * as Constant from '../Constants/Constant';\r\n\r\nconst initialState = {\r\n    tabStatus: Constant.STAT_HOME,\r\n        \r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case Constant.ACT_MENUCHANGE:\r\n            return Object.assign({}, state, {\r\n                tabStatus: action.tabStatus,\r\n            });\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","// tabStatus\r\nexport const STAT_HOME = 'STAT_REGISTRATION';\r\n\r\n// Action\r\nexport const ACT_MENUCHANGE = 'ACT_MENUCHANGE';\r\n","import { combineReducers } from 'redux';\r\nimport Reducer from './Reducers/Reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    Reducer,\r\n});\r\n\r\nexport default rootReducer;","import * as Constant from '../Constants/Constant';\r\n\r\nexport function menuChange(tabStatus) {\r\n    return {\r\n        type: Constant.ACT_MENUCHANGE,\r\n        tabStatus: tabStatus\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Input, Dropdown, Menu, Header, Label, Button, Checkbox, Icon, Table, Popup, Container } from 'semantic-ui-react';\r\n\r\nimport { mapStateToProps, mapDispatchToProps } from '../Root.js';\r\nimport DatePicker from 'react-datepicker';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport moment from 'moment';\r\n\r\nexport class Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Hellow world\r\n            </div>\r\n        )  \r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Home);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nimport _ from 'lodash';\r\n\r\nimport { mapStateToProps, mapDispatchToProps } from './Root';\r\nimport * as Constant from './Constants/Constant';\r\nimport Home from './Components/Home';\r\n\r\n\r\nexport class Tab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const propsDiff = _.isEqual(nextProps, this.props);\r\n        const stateDiff = _.isEqual(nextState, this.state);\r\n        return !(propsDiff && stateDiff);\r\n    }\r\n\r\n    render() {\r\n        switch (this.props.Reducer.tabStatus) {\r\n            case Constant.STAT_HOME:\r\n                return (\r\n                    <div>\r\n                        <Home />\r\n                    </div>\r\n                );\r\n            default:\r\n                return (\r\n                    <div>\r\n                        No content...\r\n                    </div>\r\n                );\r\n        }\r\n    }\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Tab);\r\n","import React, { Component } from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './App.css';\r\nimport { Header, Segment, Icon, Menu, Modal, Button, Form, Image, Sidebar, Table } from 'semantic-ui-react';\r\n\r\nimport _ from 'lodash';\r\n\r\nimport * as Action from './Actions/Action';\r\nimport * as Constant from './Constants/Constant';\r\nimport Tab from './Tab';\r\n\r\n\r\nexport class Root extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        }\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const propsDiff = _.isEqual(nextProps, this.props);\r\n        const stateDiff = _.isEqual(nextState, this.state);\r\n        return !(propsDiff && stateDiff);\r\n    }\r\n\r\n    render() {\r\n        let wide = window.innerWidth;\r\n        if (wide < 960) {\r\n            return (\r\n                <Tab />\r\n            )\r\n        } else {\r\n            return (\r\n                <div>No Content...</div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n// state の中に store.js の combineReducers で指定したキーの State が全部入ってくる\r\nexport function mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nexport function mapDispatchToProps(dispatch) {\r\n    return {\r\n        action: bindActionCreators(Action, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Root);","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport createFinalStore from './store';\n\nimport Root from './Root'\n\nconst store = createFinalStore();\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Root />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import { compose, createStore, applyMiddleware } from 'redux';\r\nimport Thunk from 'redux-thunk';\r\nimport rootReducer from './rootReducer';\r\n\r\nexport default function createFinalStore() {\r\n    const finalCreateStore = compose(applyMiddleware(Thunk))(createStore);\r\n    return finalCreateStore(rootReducer);\r\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'babel-polyfill';\r\nimport 'url-polyfill';\r\nimport \"isomorphic-fetch\";\r\nimport 'react-app-polyfill/ie11';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}